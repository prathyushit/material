{"ast":null,"code":"import axios from \"../config/http\";\nexport const getBuckets = async () => {\n  try {\n    const response = await axios.get(\"dev/buckets\");\n    return response.data.body;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// export const validateFiles = async (bucketName) => {\n//   try {\n//     const params = {\n//       bucketName: bucketName,\n//     };\n//     const response = await axios.post(\"dev/validate\", params);\n//     return response.data.body;\n//   } catch (error) {\n//     throw error;\n//   }\n// };\n\nexport const validateFiles = async bucketName => {\n  try {\n    const params = {\n      body: {\n        source_bucket: bucketName\n      }\n    };\n    const response = await axios.post(\"dev/validate\", params);\n\n    // Log the full response object to check its structure\n    console.log(\"Full Response:\", response);\n\n    // Check if response.data and response.data.body exist\n    if (response && response.data) {\n      return response.data.body;\n    } else {\n      // Handle case where response data is not in the expected format\n      console.error(\"Unexpected response format:\", response);\n      throw new Error(\"Unexpected response format.\");\n    }\n  } catch (error) {\n    console.error(\"Request Error:\", error);\n    throw error;\n  }\n};\nexport const transformFiles = async (bucketName, format) => {\n  try {\n    const params = {\n      body: {\n        source_bucket: bucketName,\n        source_key: \"intermediate_json/\"\n        // destination_bucket: \"edi-to-fhir-output\"\n      }\n    };\n    // const params ={ body: JSON.stringify({\n    //   source_bucket: bucketName,\n    //   source_key: \"intermediate_json/parsed_json_test.json\",\n    //   destination_bucket: \"edi-to-fhir-output\"\n    // })}\n    const response = await axios.post(\"dev/transform\", params);\n\n    // Log the full response object to check its structure\n    console.log(\"Full Response:\", response);\n\n    // Check if response.data and response.data.body exist\n    if (response && response.data) {\n      return response.data.body;\n    } else {\n      // Handle case where response data is not in the expected format\n      console.error(\"Unexpected response format:\", response);\n      throw new Error(\"Unexpected response format.\");\n    }\n  } catch (error) {\n    console.error(\"Request Error:\", error);\n    throw error;\n  }\n};\nexport const downloadFiles = async bucketName => {\n  try {\n    const dataInfo = {\n      type: \"download-status\",\n      \"Last Updated Date & Time\": \"01/17/2024 2:00 PM EST\",\n      \"Total Number of Files\": \"1,000,000,000\",\n      \"Validated Files\": \"800,000,000\",\n      \"EDI 1 Files\": \"700,000,000\",\n      \"EDI 2 Files\": \"100,000,000\"\n    };\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(dataInfo);\n      }, 3000);\n    });\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getBuckets","response","get","data","body","error","validateFiles","bucketName","params","source_bucket","post","console","log","Error","transformFiles","format","source_key","downloadFiles","dataInfo","type","Promise","resolve","setTimeout"],"sources":["C:/Users/swamy/Downloads/material-dashboard-react-main/material-dashboard-react-main/src/service/dataService.js"],"sourcesContent":["import axios from \"../config/http\";\n\nexport const getBuckets = async () => {\n  try {\n    const response = await axios.get(\"dev/buckets\");\n    return response.data.body;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// export const validateFiles = async (bucketName) => {\n//   try {\n//     const params = {\n//       bucketName: bucketName,\n//     };\n//     const response = await axios.post(\"dev/validate\", params);\n//     return response.data.body;\n//   } catch (error) {\n//     throw error;\n//   }\n// };\n\nexport const validateFiles = async (bucketName) => {\n  try {\n    const params = {body:{\n      source_bucket: bucketName\n    }\n    };\n    const response = await axios.post(\"dev/validate\", params);\n\n    // Log the full response object to check its structure\n    console.log(\"Full Response:\", response);\n\n    // Check if response.data and response.data.body exist\n    if (response && response.data) {\n      return response.data.body;\n    } else {\n      // Handle case where response data is not in the expected format\n      console.error(\"Unexpected response format:\", response);\n      throw new Error(\"Unexpected response format.\");\n    }\n  } catch (error) {\n    console.error(\"Request Error:\", error);\n    throw error;\n  }\n};\n\nexport const transformFiles = async (bucketName, format) => {\n  try {\n    const params = {body:{\n      source_bucket: bucketName,\n      source_key: \"intermediate_json/\"\n      // destination_bucket: \"edi-to-fhir-output\"\n    }};\n    // const params ={ body: JSON.stringify({\n    //   source_bucket: bucketName,\n    //   source_key: \"intermediate_json/parsed_json_test.json\",\n    //   destination_bucket: \"edi-to-fhir-output\"\n    // })}\n    const response = await axios.post(\"dev/transform\", params);\n\n    // Log the full response object to check its structure\n    console.log(\"Full Response:\", response);\n\n    // Check if response.data and response.data.body exist\n    if (response && response.data) {\n      return response.data.body;\n    } else {\n      // Handle case where response data is not in the expected format\n      console.error(\"Unexpected response format:\", response);\n      throw new Error(\"Unexpected response format.\");\n    }\n  } catch (error) {\n    console.error(\"Request Error:\", error);\n    throw error;\n  }\n  };\n\n\nexport const downloadFiles = async (bucketName) => {\n  try {\n    const dataInfo = {\n      type: \"download-status\",\n      \"Last Updated Date & Time\": \"01/17/2024 2:00 PM EST\",\n      \"Total Number of Files\": \"1,000,000,000\",\n      \"Validated Files\": \"800,000,000\",\n      \"EDI 1 Files\": \"700,000,000\",\n      \"EDI 2 Files\": \"100,000,000\",\n    };\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(dataInfo);\n      }, 3000);\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,gBAAgB;AAElC,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,aAAa,CAAC;IAC/C,OAAOD,QAAQ,CAACE,IAAI,CAACC,IAAI;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI;IACF,MAAMC,MAAM,GAAG;MAACJ,IAAI,EAAC;QACnBK,aAAa,EAAEF;MACjB;IACA,CAAC;IACD,MAAMN,QAAQ,GAAG,MAAMF,KAAK,CAACW,IAAI,CAAC,cAAc,EAAEF,MAAM,CAAC;;IAEzD;IACAG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEX,QAAQ,CAAC;;IAEvC;IACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,IAAI,EAAE;MAC7B,OAAOF,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC3B,CAAC,MAAM;MACL;MACAO,OAAO,CAACN,KAAK,CAAC,6BAA6B,EAAEJ,QAAQ,CAAC;MACtD,MAAM,IAAIY,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAOP,UAAU,EAAEQ,MAAM,KAAK;EAC1D,IAAI;IACF,MAAMP,MAAM,GAAG;MAACJ,IAAI,EAAC;QACnBK,aAAa,EAAEF,UAAU;QACzBS,UAAU,EAAE;QACZ;MACF;IAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA,MAAMf,QAAQ,GAAG,MAAMF,KAAK,CAACW,IAAI,CAAC,eAAe,EAAEF,MAAM,CAAC;;IAE1D;IACAG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEX,QAAQ,CAAC;;IAEvC;IACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,IAAI,EAAE;MAC7B,OAAOF,QAAQ,CAACE,IAAI,CAACC,IAAI;IAC3B,CAAC,MAAM;MACL;MACAO,OAAO,CAACN,KAAK,CAAC,6BAA6B,EAAEJ,QAAQ,CAAC;MACtD,MAAM,IAAIY,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACA,CAAC;AAGH,OAAO,MAAMY,aAAa,GAAG,MAAOV,UAAU,IAAK;EACjD,IAAI;IACF,MAAMW,QAAQ,GAAG;MACfC,IAAI,EAAE,iBAAiB;MACvB,0BAA0B,EAAE,wBAAwB;MACpD,uBAAuB,EAAE,eAAe;MACxC,iBAAiB,EAAE,aAAa;MAChC,aAAa,EAAE,aAAa;MAC5B,aAAa,EAAE;IACjB,CAAC;IAED,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAACH,QAAQ,CAAC;MACnB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}