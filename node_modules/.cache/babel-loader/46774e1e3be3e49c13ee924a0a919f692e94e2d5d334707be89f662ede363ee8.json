{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { forgotPasswordUser, loginUser, resetPasswordUser, refreshTokenUser } from \"../service/authService\";\nimport { setItemToLS } from \"../config/storage\";\nclass AuthStore {\n  constructor() {\n    this.isLoading = false;\n    this.token = null;\n    this.errorMsg = null;\n    this.email = null;\n    makeAutoObservable(this, {}, {\n      autoBind: true\n    });\n    this.isLoading = false;\n    this.token = null;\n    this.errorMsg = null;\n  }\n  async login(credentials) {\n    try {\n      this.isLoading = true;\n      const session = await loginUser(credentials);\n      const accessToken = session.getAccessToken().getJwtToken();\n      const idToken = session.getIdToken().getJwtToken();\n      const refreshToken = session.getRefreshToken().getToken();\n      runInAction(() => {\n        this.isLoading = false;\n        this.token = accessToken;\n        this.errorMsg = null;\n      });\n      this.setToken({\n        accessToken,\n        idToken,\n        refreshToken\n      });\n      this.setEmail(credentials.email);\n      return this.token;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n      throw error;\n    }\n  }\n  async forgotPassword(email) {\n    try {\n      this.isLoading = true;\n      const data = await forgotPasswordUser(email);\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = null;\n        this.email = email;\n      });\n      return data;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n    }\n  }\n  async resetPassword(credentials) {\n    try {\n      this.isLoading = true;\n      const data = await resetPasswordUser(credentials, this.email);\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = null;\n      });\n      return data;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n    }\n  }\n  async refreshToken() {\n    try {\n      this.isLoading = true;\n      const session = await refreshTokenUser();\n      const accessToken = session.getAccessToken().getJwtToken();\n      const idToken = session.getIdToken().getJwtToken();\n      const refreshToken = session.getRefreshToken().getToken();\n      this.setToken({\n        accessToken,\n        idToken,\n        refreshToken\n      });\n      runInAction(() => {\n        this.isLoading = false;\n        this.token = accessToken;\n        this.errorMsg = null;\n      });\n      return session;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n    }\n  }\n  clearError() {\n    this.errorMsg = null;\n  }\n  setToken({\n    accessToken,\n    idToken,\n    refreshToken\n  }) {\n    setItemToLS(\"access_token\", accessToken);\n    setItemToLS(\"id_token\", idToken);\n    setItemToLS(\"refresh_token\", refreshToken);\n    window.dispatchEvent(new Event(\"storageChange\"));\n  }\n  setEmail(email) {\n    setItemToLS(\"email\", email);\n  }\n}\nexport default AuthStore;","map":{"version":3,"names":["makeAutoObservable","runInAction","forgotPasswordUser","loginUser","resetPasswordUser","refreshTokenUser","setItemToLS","AuthStore","constructor","isLoading","token","errorMsg","email","autoBind","login","credentials","session","accessToken","getAccessToken","getJwtToken","idToken","getIdToken","refreshToken","getRefreshToken","getToken","setToken","setEmail","error","message","forgotPassword","data","resetPassword","clearError","window","dispatchEvent","Event"],"sources":["C:/Users/swamy/Downloads/material-dashboard-react-main/material-dashboard-react-main/src/store/authStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport {\n  forgotPasswordUser,\n  loginUser,\n  resetPasswordUser,\n  refreshTokenUser,\n} from \"../service/authService\";\nimport { setItemToLS } from \"../config/storage\";\n\nclass AuthStore {\n  isLoading = false;\n  token = null;\n  errorMsg = null;\n  email = null;\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.isLoading = false;\n    this.token = null;\n    this.errorMsg = null;\n  }\n\n  async login(credentials) {\n    try {\n      this.isLoading = true;\n      const session = await loginUser(credentials);\n\n      const accessToken = session.getAccessToken().getJwtToken();\n      const idToken = session.getIdToken().getJwtToken();\n      const refreshToken = session.getRefreshToken().getToken();\n\n      runInAction(() => {\n        this.isLoading = false;\n        this.token = accessToken;\n        this.errorMsg = null;\n      });\n\n      this.setToken({ accessToken, idToken, refreshToken });\n      this.setEmail(credentials.email);\n\n      return this.token;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n      throw error;\n    }\n  }\n\n  async forgotPassword(email) {\n    try {\n      this.isLoading = true;\n      const data = await forgotPasswordUser(email);\n\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = null;\n        this.email = email;\n      });\n\n      return data;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n    }\n  }\n\n  async resetPassword(credentials) {\n    try {\n      this.isLoading = true;\n      const data = await resetPasswordUser(credentials, this.email);\n\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = null;\n      });\n\n      return data;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n    }\n  }\n\n  async refreshToken() {\n    try {\n      this.isLoading = true;\n      const session = await refreshTokenUser();\n\n      const accessToken = session.getAccessToken().getJwtToken();\n      const idToken = session.getIdToken().getJwtToken();\n      const refreshToken = session.getRefreshToken().getToken();\n\n      this.setToken({ accessToken, idToken, refreshToken });\n\n      runInAction(() => {\n        this.isLoading = false;\n        this.token = accessToken;\n        this.errorMsg = null;\n      });\n\n      return session;\n    } catch (error) {\n      runInAction(() => {\n        this.isLoading = false;\n        this.errorMsg = error.message;\n      });\n    }\n  }\n\n  clearError() {\n    this.errorMsg = null;\n  }\n\n  setToken({ accessToken, idToken, refreshToken }) {\n    setItemToLS(\"access_token\", accessToken);\n    setItemToLS(\"id_token\", idToken);\n    setItemToLS(\"refresh_token\", refreshToken);\n    window.dispatchEvent(new Event(\"storageChange\"));\n  }\n\n  setEmail(email) {\n    setItemToLS(\"email\", email);\n  }\n}\n\nexport default AuthStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}