{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { getBuckets, validateFiles, transformFiles, downloadFiles } from \"../service/dataService\";\nclass DataStore {\n  constructor() {\n    this.selectedBucket = \"\";\n    this.selectedFormat = \"FHIR XML Format\";\n    this.buckets = [];\n    this.step = 0;\n    this.validated = false;\n    this.converted = false;\n    this.isLoading = false;\n    this.isValidateLoading = false;\n    this.isTransformLoading = false;\n    this.isDownloadLoading = false;\n    this.validateStatusMsg = null;\n    this.convertStatusMsg = null;\n    makeAutoObservable(this, {}, {\n      autoBind: true\n    });\n  }\n  async getBuckets() {\n    try {\n      this.isLoading = true;\n      const data = await getBuckets();\n      this.buckets = JSON.parse(data);\n      runInAction(() => {\n        this.isLoading = false;\n        this.statusMsg = null;\n      });\n    } catch (error) {\n      console.log(\"error ===>\", error);\n      runInAction(() => {\n        this.isLoading = false;\n        this.statusMsg = error;\n      });\n    }\n  }\n\n  // async validateFiles() {\n  //   try {\n  //     this.isValidateLoading = true;\n  //     this.validateStatusMsg = null;\n  //     const response = await validateFiles(this.selectedBucket);\n\n  //     runInAction(() => {\n  //       this.isValidateLoading = false;\n  //       this.validateStatusMsg = JSON.parse(response);\n  //       this.validated = true;\n  //       this.step = 2;\n  //     });\n  //   } catch (error) {\n  //     runInAction(() => {\n  //       this.isValidateLoading = false;\n  //       this.validateStatusMsg = error;\n  //     });\n  //   }\n  // }\n\n  async validateFiles() {\n    try {\n      this.isValidateLoading = true;\n      this.validateStatusMsg = null;\n      const response = await validateFiles(this.selectedBucket);\n      runInAction(() => {\n        this.isValidateLoading = false;\n        try {\n          // Log the response to check its structure\n          console.log(\"API Response datastore:\", response);\n          // Assuming response is JSON string and needs parsing\n          // this.validateStatusMsg = JSON.parse(response);\n          this.validateStatusMsg = response;\n          console.log(\"this.validateStatusMsg\", this.validateStatusMsg);\n          this.validated = true;\n          this.step = 2;\n        } catch (parseError) {\n          // Handle JSON parsing errors\n          console.error(\"Parsing Error:\", parseError);\n          this.validateStatusMsg = `Parsing Error: ${parseError.message}`;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.isValidateLoading = false;\n        console.error(\"API Error:\", error);\n        this.validateStatusMsg = `API Error: ${error.message}`;\n      });\n    }\n  }\n  async transformFiles() {\n    try {\n      this.isTransformLoading = true;\n      this.convertStatusMsg = null;\n      const response = await transformFiles(this.selectedBucket, this.selectedFormat);\n      runInAction(() => {\n        this.isTransformLoading = false;\n        this.convertStatusMsg = response;\n        this.converted = true;\n        this.step = 3;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.isTransformLoading = false;\n        this.convertStatusMsg = error;\n      });\n    }\n  }\n  async downloadFiles() {\n    try {\n      this.isDownloadLoading = true;\n      this.statusMsg = null;\n      const response = await downloadFiles(this.selectedBucket);\n      runInAction(() => {\n        this.isDownloadLoading = false;\n        this.statusMsg = response;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.isDownloadLoading = false;\n        this.statusMsg = error;\n      });\n    }\n  }\n  changeBucket(bucket) {\n    this.selectedBucket = bucket;\n  }\n  changeStep(step) {\n    this.step = step;\n  }\n  resetState() {\n    this.selectedBucket = \"\";\n    this.validateStatusMsg = null;\n    this.step = 0;\n    this.convertStatusMsg = null;\n    this.validated = false;\n    this.converted = false;\n  }\n}\nexport default DataStore;","map":{"version":3,"names":["makeAutoObservable","runInAction","getBuckets","validateFiles","transformFiles","downloadFiles","DataStore","constructor","selectedBucket","selectedFormat","buckets","step","validated","converted","isLoading","isValidateLoading","isTransformLoading","isDownloadLoading","validateStatusMsg","convertStatusMsg","autoBind","data","JSON","parse","statusMsg","error","console","log","response","parseError","message","changeBucket","bucket","changeStep","resetState"],"sources":["C:/Users/swamy/Downloads/material-dashboard-react-main/material-dashboard-react-main/src/store/dataStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport {\n  getBuckets,\n  validateFiles,\n  transformFiles,\n  downloadFiles,\n} from \"../service/dataService\";\n\nclass DataStore {\n  selectedBucket = \"\";\n  selectedFormat = \"FHIR XML Format\";\n  buckets = [];\n  step = 0;\n  validated = false;\n  converted = false;\n\n  isLoading = false;\n  isValidateLoading = false;\n  isTransformLoading = false;\n  isDownloadLoading = false;\n\n  validateStatusMsg = null;\n  convertStatusMsg = null;\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n  }\n\n  async getBuckets() {\n    try {\n      this.isLoading = true;\n      const data = await getBuckets();\n      this.buckets = JSON.parse(data);\n      runInAction(() => {\n        this.isLoading = false;\n        this.statusMsg = null;\n      });\n    } catch (error) {\n      console.log(\"error ===>\", error);\n      runInAction(() => {\n        this.isLoading = false;\n        this.statusMsg = error;\n      });\n    }\n  }\n\n  // async validateFiles() {\n  //   try {\n  //     this.isValidateLoading = true;\n  //     this.validateStatusMsg = null;\n  //     const response = await validateFiles(this.selectedBucket);\n\n  //     runInAction(() => {\n  //       this.isValidateLoading = false;\n  //       this.validateStatusMsg = JSON.parse(response);\n  //       this.validated = true;\n  //       this.step = 2;\n  //     });\n  //   } catch (error) {\n  //     runInAction(() => {\n  //       this.isValidateLoading = false;\n  //       this.validateStatusMsg = error;\n  //     });\n  //   }\n  // }\n\n  async validateFiles() {\n    try {\n      this.isValidateLoading = true;\n      this.validateStatusMsg = null;\n      const response = await validateFiles(this.selectedBucket);\n  \n      runInAction(() => {\n        this.isValidateLoading = false;\n        try {\n          // Log the response to check its structure\n          console.log(\"API Response datastore:\", response);\n          // Assuming response is JSON string and needs parsing\n          // this.validateStatusMsg = JSON.parse(response);\n          this.validateStatusMsg = response;\n          console.log(\"this.validateStatusMsg\",this.validateStatusMsg);\n          this.validated = true;\n          this.step = 2;\n        } catch (parseError) {\n          // Handle JSON parsing errors\n          console.error(\"Parsing Error:\", parseError);\n          this.validateStatusMsg = `Parsing Error: ${parseError.message}`;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.isValidateLoading = false;\n        console.error(\"API Error:\", error);\n        this.validateStatusMsg = `API Error: ${error.message}`;\n      });\n    }\n  }\n\n  async transformFiles() {\n    try {\n      this.isTransformLoading = true;\n      this.convertStatusMsg = null;\n      const response = await transformFiles(\n        this.selectedBucket,\n        this.selectedFormat\n      );\n\n      runInAction(() => {\n        this.isTransformLoading = false;\n        this.convertStatusMsg = response;\n        this.converted = true;\n        this.step = 3;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.isTransformLoading = false;\n        this.convertStatusMsg = error;\n      });\n    }\n  }\n\n  async downloadFiles() {\n    try {\n      this.isDownloadLoading = true;\n      this.statusMsg = null;\n      const response = await downloadFiles(this.selectedBucket);\n\n      runInAction(() => {\n        this.isDownloadLoading = false;\n        this.statusMsg = response;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.isDownloadLoading = false;\n        this.statusMsg = error;\n      });\n    }\n  }\n\n  changeBucket(bucket) {\n    this.selectedBucket = bucket;\n  }\n\n  changeStep(step) {\n    this.step = step;\n  }\n\n  resetState() {\n    this.selectedBucket = \"\";\n    this.validateStatusMsg = null;\n    this.step = 0;\n    this.convertStatusMsg = null;\n    this.validated = false;\n    this.converted = false;\n  }\n}\n\nexport default DataStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}